Implementation

An implementation of the fundamental functions are demonstrated below.
First I'll show you how to declare a stack data structure using an array 
and its top pointer. These will be global variables in your program as 
long as you decide to use them specifically in some procedure or function.

Const
	STACK_SIZE = 100;

Var
	myStack : Array[1..STACK_SIZE] of DataItem;
	topPointer : Integer;

The initialisation is to be called before any stack operation.

Procedure InitStack;
Begin
	topPointer := 0;
End;


We now implemement the IsEmpty() and IsFull() functions.

Function IsEmpty : Boolean;
Begin
	IsEmpty := False;
	If (topPointer = 0) Then
		IsEmpty := true;
End;

Function IsFull : Boolean;
Begin
	IsFull := False;
	If ((topPointer + 1) = STACK_SIZE) Then
		IsFull := True;
End;


Here are the implementations of the Pop() and Push() functions and making 
use of the functions that we have just implemented.

Function Pop : DataItem;
Begin
	Pop := nil;
	If not IsEmpty Then
	Begin
		Pop := myStack[topPointer];
		topPointer := topPointer - 1;
	End;
End;

Procedure Push(item : DataItem);
Begin
	If not IsFull Then
	Begin
		myStack[topPointer+1] := item;
		topPointer := topPointer + 1;
	End;
End;


Finally, we implement the utility function GetSize(). Although one can 
access the current size of the stack using the global variable topPointer, 
it is of good practice to make use of functions instead of global variables.

Function GetSize : Integer;
Begin
	GetSize := topPointer;
End;